import me.modmuss50.mpp.ReleaseType

plugins {
    id "com.github.johnrengelman.shadow" version "7.1.2"
}

architectury {
    platformSetupLoomIde()
    forge()
}

loom {
    accessWidenerPath = project(":common").loom.accessWidenerPath
    forge {
        mixinConfig "theatrical-common.mixins.json"
        mixinConfig "theatrical-forge.mixins.json"

        convertAccessWideners = true
        extraAccessWideners.add loom.accessWidenerPath.get().asFile.name
    }

    runs {
        data {
            data()
            programArgs "--all", "--mod", "theatrical"
            programArgs '--output', project(':common').file('src/generated/resources').absolutePath
            programArgs '--existing', file('src/main/resources').absolutePath
            programArgs '--existing', project(':common').file('src/main/resources').absolutePath
            programArgs '--existing-mod', 'theatrical'
        }
    }
}

configurations {
    common
    shadowCommon // Don't use shadow from the shadow plugin because we don't want IDEA to index this.
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentForge.extendsFrom common
}

repositories {
    maven {
        name = 'tterrag maven'
        url = 'https://maven.tterrag.com/'
    }
}

dependencies {
    forge "net.minecraftforge:forge:${rootProject.forge_version}"
    // Remove the next line if you don't want to depend on the API
    modApi "dev.architectury:architectury-forge:${rootProject.architectury_version}"

    common(project(path: ":common", configuration: "namedElements")) { transitive false }
    shadowCommon(project(path: ":common", configuration: "transformProductionForge")) { transitive = false }

    //ArtNet
    implementation "ch.bildspur:artnet4j:${rootProject.artnet4j_version}"
    forgeRuntimeLibrary "ch.bildspur:artnet4j:${rootProject.artnet4j_version}"
    include "ch.bildspur:artnet4j:${rootProject.artnet4j_version}"

    implementation 'com.sun.activation:javax.activation:1.2.0'
    forgeRuntimeLibrary 'com.sun.activation:javax.activation:1.2.0'

    //YAML
    implementation "org.yaml:snakeyaml:${rootProject.snakeyaml_version}"
    forgeRuntimeLibrary "org.yaml:snakeyaml:${rootProject.snakeyaml_version}"
    include "org.yaml:snakeyaml:${rootProject.snakeyaml_version}"

    // Create
    modImplementation("com.simibubi.create:create-${minecraft_version}:${create_forge_version}:slim") { transitive = false }
    modImplementation("com.tterrag.registrate:Registrate:${registrate_forge_version}")
    modImplementation("com.jozufozu.flywheel:flywheel-forge-${flywheel_forge_minecraft_version}:${flywheel_forge_version}")
}

processResources {
    inputs.property "version", project.version

    filesMatching("META-INF/mods.toml") {
        expand "version": project.version
    }
}

shadowJar {
    exclude "fabric.mod.json"
    exclude "architectury.common.json"

    configurations = [project.configurations.shadowCommon]
    archiveClassifier = "dev-shadow"
}

remapJar {
    input.set shadowJar.archiveFile
    dependsOn shadowJar
    archiveBaseName.set "${rootProject.archives_base_name}-${project.name}"
    archiveClassifier = null
}

jar {
    archiveClassifier = "dev"
}

sourcesJar {
    def commonSources = project(":common").sourcesJar
    dependsOn commonSources
    from commonSources.archiveFile.map { zipTree(it) }
}

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}

publishing {
    publications {
        mavenForge(MavenPublication) {
            artifactId = rootProject.archives_base_name + "-" + project.name
            from components.java
        }
    }

    // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
    repositories {
        // Add repositories to publish to here.
    }
}

publishMods {
    file = remapJar.archiveFile
    changelog = rootProject.file("CHANGELOG.md").text
    type = project.release_type as ReleaseType
    modLoaders.add("forge")
    displayName = "Theatrical-${project.name}-${project.version}"

    if(System.getenv("CURSEFORGE_TOKEN") != null) {
        curseforge {
            projectId = project.curseforge_id
            accessToken = System.getenv("CURSEFORGE_TOKEN")
            minecraftVersions.add(project.minecraft_version)
            requires {
                slug = "architectury-api"
            }
        }
    }
    if(System.getenv("MODRINTH_TOKEN") != null){
        modrinth {
            projectId = project.modrinth_id
            accessToken = System.getenv("MODRINTH_TOKEN")
            minecraftVersions.add(project.minecraft_version)
            requires {
                projectId = "lhGA9TYQ"
            }
        }
    }
    if(System.getenv("GITHUB_TOKEN") != null) {
        github {
            repository = "theatricalmod/Theatrical"
            accessToken = providers.environmentVariable("GITHUB_TOKEN")
            commitish = System.getenv("GITHUB_REF_NAME")
        }
    }
}