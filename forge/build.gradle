plugins {
    id "com.github.johnrengelman.shadow" version "7.1.2"
    id "com.modrinth.minotaur"
}

def ENV = System.getenv()

architectury {
    platformSetupLoomIde()
    forge()
}

loom {
    accessWidenerPath = project(":common").loom.accessWidenerPath
}

configurations {
    common
    shadowCommon // Don't use shadow from the shadow plugin because we don't want IDEA to index this.
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentForge.extendsFrom common
}

dependencies {
    forge "net.minecraftforge:forge:${rootProject.forge_version}"
    // Remove the next line if you don't want to depend on the API
    modApi "dev.architectury:architectury-forge:${rootProject.architectury_version}"

    common(project(path: ":common", configuration: "namedElements")) { transitive false }
    shadowCommon(project(path: ":common", configuration: "transformProductionForge")) { transitive = false }

    //ArtNet
    implementation "ch.bildspur:artnet4j:0.6.2"
    forgeRuntimeLibrary "ch.bildspur:artnet4j:0.6.2"
    shadowCommon "ch.bildspur:artnet4j:0.6.2"

    implementation 'com.sun.activation:javax.activation:1.2.0'
    forgeRuntimeLibrary 'com.sun.activation:javax.activation:1.2.0'

    //YAML
    implementation "org.yaml:snakeyaml:1.33"
    forgeRuntimeLibrary "org.yaml:snakeyaml:1.33"
    shadowCommon "org.yaml:snakeyaml:1.33"
}

processResources {
    inputs.property "version", project.version

    filesMatching("META-INF/mods.toml") {
        expand "version": project.version
    }
}

shadowJar {
    exclude "fabric.mod.json"
    exclude "architectury.common.json"

    configurations = [project.configurations.shadowCommon]
    archiveClassifier = "dev-shadow"
}

remapJar {
    input.set shadowJar.archiveFile
    dependsOn shadowJar
    archiveBaseName.set "${rootProject.archives_base_name}-${project.name}"
    archiveClassifier = null
}

jar {
    archiveClassifier = "dev"
}

sourcesJar {
    def commonSources = project(":common").sourcesJar
    dependsOn commonSources
    from commonSources.archiveFile.map { zipTree(it) }
}

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}

publishing {
    publications {
        mavenForge(MavenPublication) {
            artifactId = rootProject.archives_base_name + "-" + project.name
            from components.java
        }
    }

    // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
    repositories {
        // Add repositories to publish to here.
    }
}

if(ENV.CURSEFORGE_TOKEN){
    curseforge {
        apiKey = ENV.CURSEFORGE_TOKEN
        project {
            id = project.curseforge_id
            releaseType = project.curseforge_type
            addGameVersion "Forge"
            addGameVersion "Java 17"
            addGameVersion project.minecraft_version
            mainArtifact(remapJar)
            relations {
                requiredDependency 'architectury-api'
            }
        }
    }
}
modrinth {
    token = ENV.MODRINTH_TOKEN // This is the default. Remember to have the MODRINTH_TOKEN environment variable set or else this will fail, or set it to whatever you want - just make sure it stays private!
    projectId = project.modrinth_id // This can be the project ID or the slug. Either will work!
    versionNumber = project.mod_version // You don't need to set this manually. Will fail if Modrinth has this version already
    versionType = project.modrinth_type // This is the default -- can also be `beta` or `alpha`
    uploadFile = remapJar // With Loom, this MUST be set to `remapJar` instead of `jar`!
    gameVersions = [project.minecraft_version] // Must be an array, even with only one version
    loaders = ["forge"] // Must also be an array - no need to specify this if you're using Loom or ForgeGradle
    dependencies { // A special DSL for creating dependencies
        required.project "architectury-api"
    }
}
tasks.modrinth.onlyIf {
    ENV.MODRINTH_TOKEN != null
}
