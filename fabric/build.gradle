plugins {
    id "com.github.johnrengelman.shadow" version "7.0.0"
    id "com.matthewprenger.cursegradle" version "1.4.0"
    id "com.modrinth.minotaur" version "2.+"
}

architectury {
    platformSetupLoomIde()
    fabric()
}

loom {
    accessWidenerPath = project(":common").loom.accessWidenerPath
}

configurations {
    common
    shadowCommon // Don't use shadow from the shadow plugin because we don't want IDEA to index this.
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentFabric.extendsFrom common
}

sourceSets.main.resources { srcDir '../forge/src/generated/resources' }

dependencies {
    modImplementation "net.fabricmc:fabric-loader:${rootProject.fabric_loader_version}"
    modApi "net.fabricmc.fabric-api:fabric-api:${rootProject.fabric_api_version}"
    // Remove the next line if you don't want to depend on the API
    modApi "dev.architectury:architectury-fabric:${rootProject.architectury_version}"

    common(project(path: ":common", configuration: "namedElements")) { transitive false }
    shadowCommon(project(path: ":common", configuration: "transformProductionFabric")) { transitive false }

    //ArtNet
    implementation "ch.bildspur:artnet4j:0.6.2"
    shadowCommon "ch.bildspur:artnet4j:0.6.2"

    //YAML
    implementation "org.yaml:snakeyaml:1.33"
    shadowCommon "org.yaml:snakeyaml:1.33"
}

processResources {
    inputs.property "version", project.version

    filesMatching("fabric.mod.json") {
        expand "version": project.version
    }
}

shadowJar {
    exclude "architectury.common.json"

    configurations = [project.configurations.shadowCommon]
    archiveClassifier = "dev-shadow"
}

remapJar {
    injectAccessWidener = true
    input.set shadowJar.archiveFile
    dependsOn shadowJar
    archiveBaseName.set "${rootProject.archives_base_name}-${project.name}"
    archiveClassifier = null
}

jar {
    archiveClassifier = "dev"
}

sourcesJar {
    def commonSources = project(":common").sourcesJar
    dependsOn commonSources
    from commonSources.archiveFile.map { zipTree(it) }
}

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}

publishing {
    publications {
        mavenFabric(MavenPublication) {
            artifactId = rootProject.archives_base_name + "-" + project.name
            from components.java
        }
    }

    // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
    repositories {
        // Add repositories to publish to here.
    }
}

if(ENV.CURSEFORGE_TOKEN){
    curseforge {
        apiKey = ENV.NANITE_TOKEN
        project {
            id = project.curseforge_id
            releaseType = project.curseforge_type
            addGameVersion "Fabric"
            addGameVersion "Java 17"
            addGameVersion project.minecraft_version
            mainArtifact(remapJar)
            relations {
                requiredDependency 'architectury-api'
                requiredDependency 'fabric-api'
            }
        }
    }
}
if(ENV.MODRINTH_TOKEN){
    modrinth {
        token = ENV.MODRINTH_TOKEN // This is the default. Remember to have the MODRINTH_TOKEN environment variable set or else this will fail, or set it to whatever you want - just make sure it stays private!
        projectId = project.modrinth_id // This can be the project ID or the slug. Either will work!
        versionNumber = project.mod_version // You don't need to set this manually. Will fail if Modrinth has this version already
        versionType = project.modrinth_type // This is the default -- can also be `beta` or `alpha`
        uploadFile = jar // With Loom, this MUST be set to `remapJar` instead of `jar`!
        gameVersions = [project.minecraft_version] // Must be an array, even with only one version
        loaders = ["fabric"] // Must also be an array - no need to specify this if you're using Loom or ForgeGradle
        dependencies { // A special DSL for creating dependencies
            required.project "architectury-api"
            required.project "fabric-api"
        }
    }
}
